class Solution:
    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:       
        wordFreq = {}
        idx = 0
        while idx < len(s) and len(wordFreq) < 2:
            if s[idx] in wordFreq:
                wordFreq[s[idx]] += 1
            else:
                wordFreq[s[idx]] = 1
            idx += 1
        maxLen = idx
        
        del_idx = 0
        while idx < len(s):
            if s[idx] in wordFreq:
                wordFreq[s[idx]] += 1
            else:
                wordFreq[s[idx]] = 1
                
            while len(wordFreq) > 2:
                char = s[del_idx]
                if wordFreq[char] > 1:
                    wordFreq[char] -= 1
                else:
                    del wordFreq[char]
                del_idx += 1
            dist = idx - del_idx + 1
            maxLen = max(maxLen,dist)
            idx += 1
        return maxLen

#TC: O(n)
#SC: O(1) because using a dictionary of maxSize 2
