class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        start, end = [], []
        for idx in intervals:
            start.append(idx[0])
            end.append(idx[1])
        start.sort()
        end.sort()
        idx1, idx2 = 0, 0 
        rooms = 0
        res = 0
        while idx1 < len(start):
            #if we encounter a new start, increment room
            #if we decrement a new end, decrement room
            if start[idx1] < end[idx2]:
                rooms += 1
                idx1 += 1
            else:
                idx2 += 1
                rooms -= 1
            res = max(res,rooms)
        return res


#solution 2:

class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        rooms_heap = []
        intervals.sort(key=lambda x:x[0])
        #construct min heap based of end times
        heapq.heappush(rooms_heap,intervals[0][1])
        for time in intervals[1:]:
            #if the last element of the heap is less than the current start, then we don't need extra room
            if rooms_heap[0] <= time[0]:
                heapq.heappop(rooms_heap)
            
            #add the new room
            heapq.heappush(rooms_heap,time[1])
        return len(rooms_heap)
