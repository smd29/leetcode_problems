class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        #dfs 
        res = []
        stack = [(0,[0])]
        target = len(graph) - 1
        while stack:
            node, path = stack.pop()
            if node == target:
                res.append(path)
            else:
                for neighbor in graph[node]:
                    stack.append((neighbor,path+[neighbor]))
        return res
    
        #bfs
        res = []
        queue = collections.deque([(0,[0])])
        target = len(graph) - 1
        while queue:
            node, path = queue.popleft()
            if node == target:
                res.append(path)
            else:
                for neighbor in graph[node]:
                    stack.append((neighbor,path+[neighbor]))
        return res
