# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        width = 1
        queue = collections.deque()
        queue.append((root,1))
        
        while queue:
            level = []
            for _ in range(len(queue)):
                node,idx = queue.popleft()
                if node:
                    level.append(idx)
                    queue.append((node.left,2*idx))
                    queue.append((node.right,2*idx+1))
            if level:
                width = max(width,level[-1]-level[0]+1)
        return width
