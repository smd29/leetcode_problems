# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def upsideDownBinaryTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None 
        
        queue = collections.deque([[root,None,None]])
        while queue:
            node,parent,left = queue.popleft()
            if node.left:
                queue.append([node.left,node,node.right]) #every right node must have a sibling
            if parent:
                node.left,node.right = left,parent
            else:
                node.left,node.right = None, None
        return node
