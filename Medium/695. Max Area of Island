class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        visited = set()
        
        def bfs(r,c):
            queue = collections.deque()
            queue.append((r,c))
            visited.add((r,c))
            area = 1
            while queue:
                row,col = queue.popleft()
                directions = [(1,0),(0,1),(-1,0),(0,-1)]
                for dr,dc in directions:
                    r,c = dr + row, dc + col
                    if r in range(rows) and c in range(cols) and grid[r][c] == 1 and (r,c) not in visited:
                        visited.add((r,c))
                        queue.append((r,c))
                        area += 1
            return area
        
        max_area = 0
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 1 and (r,c) not in visited:
                    curr_area = bfs(r,c)
                    max_area = max(max_area,curr_area)
        return max_area
