# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countUnivalSubtrees(self, root: Optional[TreeNode]) -> int:
        
        def dfs(node):
            if not node:
                return True
            if not node.left and not node.right:
                self.count += 1
                return True
            left_subtree = dfs(node.left)
            right_subtree = dfs(node.right)
            if node.left and node.right:
                if node.val == node.left.val and node.val == node.right.val and left_subtree and right_subtree:
                    self.count += 1
                    return True
                return False
            
            if node.left and not node.right:
                if node.val == node.left.val and left_subtree:
                    self.count += 1
                    return True
                return False
            
            if node.right and not node.left:
                if node.val == node.right.val and right_subtree:
                    self.count += 1
                    return True
                return False
        self.count = 0 
        dfs(root)
        return self.count
