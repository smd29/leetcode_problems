class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        deadend_set = set(deadends)
        if "0000" in deadend_set:
            return -1
        queue = deque([(0,"0000")])
        visited = set("0000")
        while queue:
            steps,char = queue.popleft()
            if char == target:
                return steps
            for idx,c in enumerate(char):
                new_str1, new_str2 = "",""
                if c == "0":
                    new_str1 = char[:idx] + "1" + char[idx+1:]
                    new_str2 = char[:idx] + "9" + char[idx+1:]
                elif c == "9":
                    new_str1 = char[:idx] + "0" + char[idx+1:]
                    new_str2 = char[:idx] + "8" + char[idx+1:]
                else:
                    new_str1 = char[:idx] + str(int(c)+1) + char[idx+1:]
                    new_str2 = char[:idx] + str(int(c)-1) + char[idx+1:]
                if new_str1 not in visited and new_str1 not in deadend_set:
                    visited.add(new_str1)
                    queue.append((steps+1,new_str1))
                if new_str2 not in visited and new_str2 not in deadend_set:
                    visited.add(new_str2)
                    queue.append((steps+1,new_str2))
        return -1
