# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque
class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.root = root
        self.res = deque()
        def dfs(node):
            if node:
                dfs(node.left)
                self.res.append(node.val)
                dfs(node.right)
        dfs(root)
        
        
    def next(self) -> int:
        val = self.res[0]
        self.res.popleft()
        return val

    def hasNext(self) -> bool:
        if self.res:
            return True
        return False
    
        


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
