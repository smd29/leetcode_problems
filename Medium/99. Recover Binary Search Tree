# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        res = []
        def inOrder(node):
            if node:
                inOrder(node.left)
                res.append(node)
                inOrder(node.right)
        inOrder(root)
        
        for i in range(len(res)-1):
            if res[i].val > res[i+1].val:
                first = res[i]
                break
        for i in range(len(res)-1,0,-1):
            if res[i].val < res[i-1].val:
                second = res[i]
                break
        
        #the nodes containing the first and second values will be swapped 
        first.val, second.val = second.val,first.val
