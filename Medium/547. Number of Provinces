class UnionFind(object):
    def __init__(self,size):
        self.root = [i for i in range(size)]
        
    
    def find(self,x):
        while x != self.root[x]:
            x = self.root[x]
        return x
    
    def union(self,x,y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y: 
            self.root[root_x] = root_y
        
class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        uf = UnionFind(n)
        for r in range(n):
            for c in range(n):
                if isConnected[r][c] == 1:
                    uf.union(r,c)
        return len(set([uf.find(node) for node in range(n)]))
