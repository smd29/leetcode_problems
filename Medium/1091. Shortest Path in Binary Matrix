class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if grid[0][0] == 1 or grid[-1][-1] == 1:
            return -1 
        rows, cols = len(grid), len(grid[0])
        visited = set((0,0))
        queue = collections.deque([(0,0,1)])
        
        while queue:
            row,col, length = queue.popleft()
            if (row,col) == (rows-1,cols-1):
                return length
            directions = [(0,1),(1,0),(0,-1),(-1,0),(1,1),(-1,1),(1,-1),(-1,-1)]
            for dr, dc in directions:
                r,c = row+dr, col+dc
                if (r in range(rows) and (c in range(cols)) and grid[r][c] == 0 and (r,c) not in visited):
                     visited.add((r,c))
                     queue.append([r,c,length+1])
        return -1
