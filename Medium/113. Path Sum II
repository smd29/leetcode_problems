# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        if not root:
            return []
        curr_path, res = [], []
        return self.dfs(root,targetSum,curr_path,res)
        
    def dfs(self,node,curr_sum,curr_path,res):
        if not node.left and not node.right:
            if node.val == curr_sum:
                res += [curr_path+[node.val]]
        if node.left:
            self.dfs(node.left,curr_sum - node.val,curr_path + [node.val],res)
        if node.right:
            self.dfs(node.right,curr_sum - node.val,curr_path + [node.val],res)
        return res
