# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:
        if not head:
            return None 
        mid = self.findMid(head)
        root = TreeNode(mid.val)
        if head == mid:
            return root
        
        root.left = self.sortedListToBST(head)
        root.right = self.sortedListToBST(mid.next)
        return root
        
        
    def findMid(self,head):
        prev = None
        pointer1 = head
        pointer2 = head
        if head.next is None:
            return head
        while pointer1 and pointer1.next:
            prev = pointer2
            pointer2 = pointer2.next
            pointer1 = pointer1.next.next
        if prev:
            prev.next = None
        return pointer2
