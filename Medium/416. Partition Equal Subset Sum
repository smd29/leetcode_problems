class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 == 0:
            return self.subsetSum(nums,total //2)
        return False
        
        
    def subsetSum(self,arr,target):
        #initialize the matrix
        n = len(arr)
        dp = [[False for idx in range(target+1)] for idx in range(n+1)]
        
        for idx in range(n+1):
            dp[idx][0] = True
                
        for idx in range(1,target+1):
            dp[0][idx] = False
            
        for r in range(1,n+1):
            for c in range(1,target+1):
                if c >= arr[r-1]:
                    dp[r][c] = dp[r-1][c] or dp[r-1][c-arr[r-1]]
                else:
                    dp[r][c] = dp[r-1][c]
        return dp[-1][-1]
