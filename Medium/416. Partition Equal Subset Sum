class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 == 0:
            return self.subsetSum(nums,total //2)
        return False
        
        
    def subsetSum(self,arr,target):
        #create a (n+1)*(target+1) matrix 
        n = len(arr)
        dp = [[False for c in range(target+1)]for r in range(n+1)]
        
        #if the target is 0 then True
        for r in range(n+1):
            dp[r][0] = True
        
        for r in range(1,n+1):
            for c in range(target+1):
                #we have two options: take or notTake
                #we can take only when target is greater than current
                
                if c >= arr[r-1]:
                    Take = dp[r-1][c-arr[r-1]]
                    notTake = dp[r-1][c]
                    dp[r][c] = Take or notTake
                else:
                    dp[r][c] = dp[r-1][c]
        return dp[-1][-1]
