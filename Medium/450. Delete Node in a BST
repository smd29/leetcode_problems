# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        if not root:
            return None
        if root.val > key:
            root.left = self.deleteNode(root.left,key)
        elif root.val < key:
            root.right = self.deleteNode(root.right,key)
        else:
            #case1: leaf node
            if not root.left and not root.right:
                return None
            #case2: have only one child
            elif not root.left:
                return root.right
            elif not root.right:
                return root.left
            #case3: has both childs 
            #find the max in the left subtree 
            max_child = self.getMax(root.left)
            root.val = max_child.val 
            root.left = self.deleteNode(root.left,max_child.val)
        return root
    
    
    def getMax(self,root):
        #return the node 
        if not root or not root.right:
            return root 
        return self.getMax(root.right)
