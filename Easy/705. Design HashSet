class MyHashSet:

    def __init__(self):
        self.size = 10 ** 4
        self.set = [None] * self.size
    
    def calculate_hash_value(self,key):
        return key % self.size
        
    def add(self, key: int) -> None:
        elem = self.calculate_hash_value(key)
        if self.set[elem] == None:
            self.set[elem] = [key]
        else:
            self.set[elem].append(key)

    def remove(self, key: int) -> None:
        elem = self.calculate_hash_value(key)
        if self.set[elem] != None:
            while key in self.set[elem]:
                self.set[elem].remove(key)

    def contains(self, key: int) -> bool:
        elem = self.calculate_hash_value(key)
        if self.set[elem] != None:
            return key in self.set[elem]
        return False


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)
