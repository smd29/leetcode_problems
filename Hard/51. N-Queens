class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        col = set()
        diagonals = set()
        antidiagonals = set()
        row_res = []
        board = []
        
        def backtrack(row):
            if row == n:
                board.append(row_res[::])
                return
            
            for c in range(n):
                if c in col or (row+c) in diagonals or (row-c) in antidiagonals:
                    continue
                col.add(c)
                diagonals.add(row+c)
                antidiagonals.add(row-c)
                row_res.append("." * c + "Q" + "." *(n-c-1))
                backtrack(row+1)
                
                #remove
                col.remove(c)
                diagonals.remove(row+c)
                antidiagonals.remove(row-c)
                row_res.pop()
                
        backtrack(0)
        return board
