# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if k < 2 or not head or not head.next:
            return head 
        _len = 1
        len_ptr = head 
        while len_ptr:
            len_ptr = len_ptr.next 
            _len += 1
        prevNode = head 
        nextNode = head.next 
        group = k - 1
        
        while nextNode and group > 0 and _len > k:
            curr = nextNode.next 
            nextNode.next = prevNode
            prevNode = nextNode 
            nextNode = curr 
            group -= 1

        head.next = self.reverseKGroup(nextNode,k)
        return prevNode
