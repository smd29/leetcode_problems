class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        total_len = len(nums1) + len(nums2)
        half_size = total_len // 2
        
        #find the correct partition n min size array 
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        
        #smaller size array is nums1
        low, high = 0, len(nums1) - 1
        while True:
            i = (low + high) // 2 #idx for nums1
            j = half_size - i  - 2 #idx for nums2 #subtracting 2 because, both the arrays are 0-based indexed
            nums1_left = nums1[i] if i >= 0 else float('-inf')
            nums1_right = nums1[i+1] if (i + 1) < len(nums1) else float('inf')
            nums2_left = nums2[j] if j >= 0 else float('-inf')
            nums2_right = nums2[j+1] if (j + 1) < len(nums2) else float('inf')
            
            #correct partition
            if nums1_left <= nums2_right and nums2_left <= nums1_right:
                #odd length 
                if total_len % 2 == 1:
                    return min(nums1_right,nums2_right)
                #even length
                else:
                    return (max(nums1_left,nums2_left)+min(nums1_right,nums2_right)) / 2
            
            elif nums1_left > nums2_right:
                high = i - 1
            
            else:
                low = i + 1
