class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        if len(points) < 3:
            return len(points)
        n = len(points)
        ans = 0
        #for all pairs, calculate m and c 
        for i in range(n):
            x1,y1 = points[i][0], points[i][1]
            overlap = 0
            freq = {}
            for j in range(n):
                x2,y2 = points[j][0], points[j][1]
                if x1 == x2 and y1 == y2:
                    overlap += 1
                    continue
                #store the combination of m and c in a dictionary
                m = str(self.calM(x1,y1,x2,y2))
                c = str(self.calC(x1,y1,x2,y2))
                tup = tuple([m,c])
                if tup in freq:
                    freq[tup] += 1
                else:
                    freq[tup] = 1
        
            #find the one with highest frequency 
            max_freq = 1
            for item in freq:
                max_freq = max(max_freq,freq[item])
            ans = max(ans,max_freq+overlap)
            
        return ans
        
                
    def gcd(self,a,b):
        if b == 0:
            return a
        return self.gcd(b,a%b)
    
    def calM(self,x1,y1,x2,y2):
        num = (y2-y1)
        denom = (x2-x1)
        if num == 0 and denom == 0:
            return [0,0]
        _gcd = self.gcd(num,denom)
        return [num // _gcd, denom // _gcd]
    
    def calC(self,x1,y1,x2,y2):
        num = (y1*x2) - (y2*x1)
        denom = (x2-x1)
        if num == 0 and denom == 0:
            return [0,0]
        _gcd = self.gcd(num,denom)
        return [num // _gcd, denom // _gcd]
