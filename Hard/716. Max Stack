from heapq import heappush, heappop

class MaxStack:

    def __init__(self):
        self.heap = []
        self.popped = set()
        self.count = 0 
        self.stack = []

    def push(self, x: int) -> None:
        self.stack.append((x,self.count))
        heappush(self.heap,(-x,-self.count))
        self.count += 1
        
    def pop(self) -> int:
        while self.stack and self.stack[-1][1] in self.popped:
            self.stack.pop()
        val, idx = self.stack.pop()
        self.popped.add(idx)
        return val

    def top(self) -> int:
        while self.stack and self.stack[-1][1] in self.popped:
            self.stack.pop()
        return self.stack[-1][0]
        
    def peekMax(self) -> int:
        while self.heap and -self.heap[0][1] in self.popped:
            heappop(self.heap)
        return -self.heap[0][0]
        
    def popMax(self) -> int:
        while self.heap and -self.heap[0][1] in self.popped:
            heappop(self.heap)
        val, idx = heappop(self.heap)
        self.popped.add(-idx)
        return -val
        

# Your MaxStack object will be instantiated and called as such:
# obj = MaxStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.peekMax()
# param_5 = obj.popMax()
