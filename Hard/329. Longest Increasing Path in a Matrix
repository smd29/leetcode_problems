class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        
        def dfs(r,c):
            if not dp[r][c]:
                val = matrix[r][c]
                dp[r][c] = 1 + max(
                    dfs(r+1,c) if r < rows - 1 and val > matrix[r+1][c] else 0,
                    dfs(r-1,c) if r > 0 and val > matrix[r-1][c] else 0,
                    dfs(r,c+1) if c < cols - 1 and val > matrix[r][c+1] else 0,
                    dfs(r,c-1) if c > 0 and val > matrix[r][c-1] else 0)
            return dp[r][c]
            
        rows, cols = len(matrix), len(matrix[0])
        dp = [[0 for c in range(cols)]for r in range(rows)]
        ans = 1
        for r in range(rows):
            for c in range(cols):
                ans = max(ans,dfs(r,c))
        return ans
