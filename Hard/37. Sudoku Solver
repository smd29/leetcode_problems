class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        rows = collections.defaultdict(set)
        cols = collections.defaultdict(set)
        squares = collections.defaultdict(set)
        
        for r in range(9):
            for c in range(9):
                if board[r][c] != ".":
                    rows[r].add(board[r][c])
                    cols[c].add(board[r][c])
                    squares[(r//3,c//3)].add(board[r][c])
        
        def backtrack(r,c):
            if r == 9:
                self.isFound = True
                return 
            if c > 8:
                backtrack(r+1,0)
            elif board[r][c] != ".":
                backtrack(r,c+1)
            else:
                for num in '123456789':
                    if num not in rows[r] and num not in cols[c] and num not in squares[(r//3,c//3)]:
                        rows[r].add(num)
                        cols[c].add(num)
                        squares[(r//3,c//3)].add(num)
                        board[r][c] = num
                        
                        backtrack(r,c+1)
                        
                        if not self.isFound:
                            rows[r].remove(num)
                            cols[c].remove(num)
                            squares[(r//3,c//3)].remove(num)
                            board[r][c] = "."
                        else:
                            return
        self.isFound = False
        backtrack(0,0)
