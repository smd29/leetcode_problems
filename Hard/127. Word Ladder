class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0 
        
        neighbor = collections.defaultdict(list)
        if beginWord not in wordList:
            wordList.append(beginWord)
        
        #get the pattern 
        for word in wordList:
            for idx in range(len(word)):
                pattern = word[:idx] + "*" + word[idx+1:]
                neighbor[pattern].append(word)
        
        
        visited = set([beginWord])
        queue = collections.deque([beginWord])
        res = 1
        
        while queue:
            for _ in range(len(queue)):
                #get the word
                word = queue.popleft()
                if word == endWord:
                    return res 
                #get the pattern of the word
                for idx in range(len(word)):
                    pattern = word[:idx] + "*" + word[idx+1:]
                    for nei in neighbor[pattern]:
                        if nei not in visited:
                            visited.add(nei)
                            queue.append(nei)
            res += 1
        return 0
